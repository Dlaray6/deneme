@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<Register> Logger

<PageTitle>Kayıt Ol</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="text-center">Yeni Kullanıcı Kaydı</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@RegisterModel" OnValidSubmit="@HandleRegister">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <!-- TC Kimlik No -->
                        <div class="mb-3">
                            <label for="tcNo" class="form-label">TC Kimlik No</label>
                            <InputText id="tcNo" @bind-Value="RegisterModel.TcNo" 
                                      class="form-control" placeholder="11 haneli giriniz" />
                            <ValidationMessage For="@(() => RegisterModel.TcNo)" class="text-danger" />
                        </div>

                        <!-- İsim Soyisim -->
                        <div class="mb-3">
                            <label for="fullName" class="form-label">İsim Soyisim</label>
                            <InputText id="fullName" @bind-Value="RegisterModel.FullName" 
                                      class="form-control" />
                            <ValidationMessage For="@(() => RegisterModel.FullName)" class="text-danger" />
                        </div>

                        <!-- Okul Numarası -->
                        <div class="mb-3">
                            <label for="schoolNumber" class="form-label">Okul Numarası</label>
                            <InputText id="schoolNumber" @bind-Value="RegisterModel.SchoolNumber" 
                                      class="form-control" />
                            <ValidationMessage For="@(() => RegisterModel.SchoolNumber)" class="text-danger" />
                        </div>

                        <!-- Okul Adı -->
                        <div class="mb-3">
                            <label for="schoolName" class="form-label">Okul Adı</label>
                            <InputText id="schoolName" @bind-Value="RegisterModel.SchoolName" 
                                      class="form-control" />
                            <ValidationMessage For="@(() => RegisterModel.SchoolName)" class="text-danger" />
                        </div>

                        <!-- Rol Seçimi -->
                        <div class="mb-4">
                            <label for="role" class="form-label">Rolünüz</label>
                            <InputSelect id="role" @bind-Value="RegisterModel.Role" class="form-select">
                                <option value="">Seçiniz...</option>
                                <option value="Student">Öğrenci</option>
                                <option value="Teacher">Öğretmen</option>
                                <option value="Admin">Yönetici</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => RegisterModel.Role)" class="text-danger" />
                        </div>

                        <!-- Kayıt Butonu -->
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@IsProcessing">
                                @(IsProcessing ? "İşleniyor..." : "Kayıt Ol")
                            </button>
                        </div>
                    </EditForm>

                    <!-- Geri Bildirim Mesajı -->
                    @if (!string.IsNullOrEmpty(Message))
                    {
                        <div class="alert @AlertClass mt-3">@Message</div>
                    }
                </div>
                <div class="card-footer text-center">
                    <span>Zaten hesabınız var mı? </span>
                    <a href="/login" class="text-primary">Giriş Yap</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Model
    public class RegisterRequest
    {
        [Required(ErrorMessage = "TC kimlik no zorunludur")]
        [StringLength(11, MinimumLength = 11, ErrorMessage = "TC no 11 haneli olmalıdır")]
        public string TcNo { get; set; } = string.Empty;

        [Required(ErrorMessage = "İsim soyisim zorunludur")]
        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Okul numarası zorunludur")]
        public string SchoolNumber { get; set; } = string.Empty;

        [Required(ErrorMessage = "Okul adı zorunludur")]
        public string SchoolName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Rol seçimi zorunludur")]
        public string Role { get; set; } = string.Empty;
    }

    // Component State
    private RegisterRequest RegisterModel { get; set; } = new();
    private bool IsProcessing { get; set; } = false;
    private string Message { get; set; } = string.Empty;
    private string AlertClass => Message.Contains("başarılı") ? "alert-success" : "alert-danger";

    // İşlemler
    private async Task HandleRegister()
    {
        IsProcessing = true;
        Message = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/register", RegisterModel);

            if (response.IsSuccessStatusCode)
            {
                Message = "Kayıt başarılı! Giriş sayfasına yönlendiriliyorsunuz...";
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Message = $"Kayıt başarısız: {error}";
                Logger.LogError($"Register error: {error}");
            }
        }
        catch (Exception ex)
        {
            Message = $"Sistem hatası: {ex.Message}";
            Logger.LogError(ex, "Register exception");
        }
        finally
        {
            IsProcessing = false;
        }
    }
}